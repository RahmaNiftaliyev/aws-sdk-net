/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 * 
 *  http://aws.amazon.com/apache2.0
 * 
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 * permissions and limitations under the License.
 */

/*
 * Do not modify this file. This file is generated from the securitylake-2018-05-10.normal.json service model.
 */
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using System.Text;
using System.IO;
using System.Net;

using Amazon.Runtime;
using Amazon.Runtime.Internal;

namespace Amazon.SecurityLake.Model
{
    /// <summary>
    /// Container for the parameters to the CreateDatalake operation.
    /// Initializes an Amazon Security Lake instance with the provided (or default) configuration.
    /// You can enable Security Lake in Regions with customized settings in advance before
    /// enabling log collection in Regions. You can either use the <code>enableAll</code>
    /// parameter to specify all Regions or you can specify the Regions you want to enable
    /// Security Lake using the <code>Regions</code> parameter and configure these Regions
    /// using the <code>configurations</code> parameter. When the <code>CreateDataLake</code>
    /// API is called multiple times, if that Region is already enabled, it will update the
    /// Region if configuration for that Region is provided. If that Region is a new Region,
    /// it will be set up with the customized configurations if it is specified. 
    /// 
    ///  
    /// <para>
    /// When you enable Security Lake, it starts ingesting security data after the <code>CreateAwsLogSource</code>
    /// call. This includes ingesting security data from sources, storing data, and making
    /// data accessible to subscribers. Security Lake also enables all the existing settings
    /// and resources that it stores or maintains for your account in the current Region,
    /// including security log and event data. For more information, see the Amazon Security
    /// Lake User Guide.
    /// </para>
    /// </summary>
    public partial class CreateDatalakeRequest : AmazonSecurityLakeRequest
    {
        private Dictionary<string, LakeConfigurationRequest> _configurations = new Dictionary<string, LakeConfigurationRequest>();
        private bool? _enableAll;
        private string _metaStoreManagerRoleArn;
        private List<string> _regions = new List<string>();

        /// <summary>
        /// Gets and sets the property Configurations. 
        /// <para>
        /// Enable Security Lake with the specified configurations settings to begin ingesting
        /// security data. 
        /// </para>
        /// </summary>
        public Dictionary<string, LakeConfigurationRequest> Configurations
        {
            get { return this._configurations; }
            set { this._configurations = value; }
        }

        // Check to see if Configurations property is set
        internal bool IsSetConfigurations()
        {
            return this._configurations != null && this._configurations.Count > 0; 
        }

        /// <summary>
        /// Gets and sets the property EnableAll. 
        /// <para>
        /// Enable Security Lake in all Regions to begin ingesting security data.
        /// </para>
        /// </summary>
        public bool EnableAll
        {
            get { return this._enableAll.GetValueOrDefault(); }
            set { this._enableAll = value; }
        }

        // Check to see if EnableAll property is set
        internal bool IsSetEnableAll()
        {
            return this._enableAll.HasValue; 
        }

        /// <summary>
        /// Gets and sets the property MetaStoreManagerRoleArn. 
        /// <para>
        /// The Role ARN used to create and update the Glue table with partitions generated by
        /// ingestion and normalization of Amazon Web Services log sources and custom sources.
        /// </para>
        /// </summary>
        public string MetaStoreManagerRoleArn
        {
            get { return this._metaStoreManagerRoleArn; }
            set { this._metaStoreManagerRoleArn = value; }
        }

        // Check to see if MetaStoreManagerRoleArn property is set
        internal bool IsSetMetaStoreManagerRoleArn()
        {
            return this._metaStoreManagerRoleArn != null;
        }

        /// <summary>
        /// Gets and sets the property Regions. 
        /// <para>
        /// Enable Security Lake in the specified Regions to begin ingesting security data. To
        /// enable Security Lake in specific Amazon Web Services Regions, such as us-east-1 or
        /// ap-northeast-3, provide the Region codes. For a list of Region codes, see <a href="https://docs.aws.amazon.com/general/latest/gr/rande.html#regional-endpoints">Region
        /// codes</a> in the Amazon Web Services General Reference.
        /// </para>
        /// </summary>
        public List<string> Regions
        {
            get { return this._regions; }
            set { this._regions = value; }
        }

        // Check to see if Regions property is set
        internal bool IsSetRegions()
        {
            return this._regions != null && this._regions.Count > 0; 
        }

    }
}